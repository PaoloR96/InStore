#TODO eliminare i commenti
#TODO cambiare i restart dei vari container

###########################################
#
# To test the app locally with nginx and keycloak integrated together
# you have to set up "local DNS rules" to resolve the domain names.
#
# In Windows you can modify the file "C:\Windows\System32\drivers\etc\hosts", adding the lines:
#   127.0.0.1 instore.puntoitstore.it
#   127.0.0.1 login.instore.puntoitstore.it
# You are bonding these domains names to the local IP address.
#
# To test in remote, you have to set DNS records to bond the domains instore.puntoitstore.it
# and login.instore.puntoitstore.it to the public IP address of your web server.
#
###########################################

services:
#  firewall-monitor:
#    build: ./firewall-monitor
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock  # Monta il socket Docker per consentire l'accesso
#    network_mode: "host"
#    environment:
#      - INTERVAL=10
#    container_name: firewall-monitor
#    privileged: true
  #    depends_on:
  #      - mysql-db
  #      - keycloak2604
  #      - vault
  #      - application-core
  #      - nginx
  mysql-db:
    build:
      context: ./MysqlService
      dockerfile: Dockerfile
    container_name: mysql.instore.puntoitstore.it
    #restart: "unless-stopped"
    restart: "no"
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: "InStore_db"
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_OPTS: "--lower_case_table_names=1"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./MysqlService/keyring:/var/lib/mysql-keyring/
      - ./letsencrypt/archive/mysql.instore.puntoitstore.it:/etc/mysql/certs:ro
      - ./MysqlService/logs:/var/log/mysql
      - ./MysqlService/logrotate-mysql.conf:/etc/logrotate.d/mysql/
    command:
      - --lower_case_table_names=1
      - --require-secure-transport=ON
      - --ssl-cert=/etc/mysql/certs/fullchain1.pem
      - --ssl-key=/etc/mysql/certs/privkey1.pem
      - --default-table-encryption
      - --max_connections=100
      - --long_query_time=2 # Logga query lente (>2s)
      - --slow_query_log=ON # Abilita slow query log
      - --slow_query_log_file=/var/log/mysql/mysql-slow.log
      - --log_error=/var/log/mysql/mysql-error.log  # Log degli errori
      - --log_error_verbosity=2  # Livello di verbosità errori
      #- --log_output=FILE # Log su file
      - --wait_timeout=3600 # Timeout connessioni inattive
      - --interactive_timeout=3600  # Timeout client interattivi
    # Sicurezza container
    privileged: false
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # Risorse
    mem_limit: 3g
    mem_reservation: 2g
    cpus: 2.0
    ulimits:
      nproc: 256
      nofile: 4096

    networks:
      instore-network:
        ipv4_address: 172.28.0.10

  #  ##########################
  #
  #   Users:
  #    - user1:user1   ->  CLIENTE
  #    - seller1:seller1 ->  RIVENDITORE
  #    - admin1:admin1  ->  ADMIN
  #
  #  ########################
  keycloak2604:
    build:
      context: ./KeycloakService
      dockerfile: Dockerfile
    container_name: login.instore.puntoitstore.it
    #restart: "unless-stopped"
    restart: "no"
    user: "keycloak"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_ADMIN_USR} # TODO implements a secure way to access to keycloak control panel
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_ADMIN_PWD}
      # remember to modify Root URL in instore-client settings by keycloak UI
      KC_HOSTNAME: ${KC_EXT_URL}
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: "true"
      KC_PROXY_HEADERS: "xforwarded"
      KC_HOSTNAME_DEBUG: "true"
      KC_HTTP_ENABLED: "false"
      KC_HTTPS_ENABLED: "true"
      KC_HTTPS_PORT: "8443"
      KC_HTTPS_CERTIFICATE_FILE: "/etc/keycloak/certs/fullchain1.pem"
      KC_HTTPS_CERTIFICATE_KEY_FILE: "/etc/keycloak/certs/privkey1.pem"
    ports:
      - "8090:8443"
    volumes:
      - ./KeycloakService/data2604:/opt/keycloak/data:rw
      - ./KeycloakService/conf/quarkus.properties:/opt/keycloak/conf/quarkus.properties:ro
      - ./letsencrypt/archive/login.instore.puntoitstore.it:/etc/keycloak/certs:ro
    entrypoint: /opt/keycloak/bin/kc.sh start-dev --log="console,file" --log-file-level=debug
    # Sicurezza container
    privileged: false
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # Risorse
    mem_limit: 2g
    mem_reservation: 1g
    cpus: 2.0
    ulimits:
      nproc: 256
      nofile: 4096
    networks:
      instore-network:
        ipv4_address: 172.28.0.20

  vault:
    build:
      context: ./VaultService
      dockerfile: Dockerfile
    #user: "vaultuser"
    container_name: vault.instore.puntoitstore.it
    #restart: "unless-stopped"
    restart: "no"
    ports:
      - '8200:8200'
    volumes:
      - ./VaultService/config:/vault/config
      - ./VaultService/policies:/vault/policies
      - ./VaultService/data:/vault/data
      - ./VaultService/logs:/vault/logs
      - ./letsencrypt/archive/vault.instore.puntoitstore.it:/vault/certs:ro

    environment:
      VAULT_ADDR: "https://0.0.0.0:8200"
      VAULT_API_ADDR: "https://0.0.0.0:8200"
    entrypoint: vault server -config=/vault/config/config.hcl
    # Sicurezza container
    privileged: false
    security_opt:
      - no-new-privileges:true
#    cap_drop:
#      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - IPC_LOCK
      #IPC_LOCK: le pagine di memoria afferenti all’applicazione
      #vengono conservate nella RAM, senza che possa essere effettuato lo swap
    # Risorse
    mem_limit: 2g
    mem_reservation: 1g
    cpus: 2.0
    ulimits:
      nproc: 256
      nofile: 4096
    networks:
        instore-network:
          ipv4_address: 172.28.0.30

  vault-init:
    container_name: vault-init
    image: hashicorp/vault:1.18.4
    user: "vault"
    restart: "no"
    environment:
      VAULT_ADDR: ${VAULT_URL}
    volumes:
      - ./VaultService/unseal-vault.sh:/vault/unseal-vault.sh
    entrypoint: sh -c "sleep 3 && /vault/unseal-vault.sh"
    depends_on:
      - vault
    # Sicurezza container
    privileged: false
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - IPC_LOCK
      #IPC_LOCK: le pagine di memoria afferenti all’applicazione
      #vengono conservate nella RAM, senza che possa essere effettuato lo swap
    # Risorse
#    mem_limit: 512m
#    mem_reservation: 256m
#    cpus: 0.5
#    ulimits:
#      nproc: 100
#      nofile: 50
    networks:
      instore-network:
        ipv4_address: 172.28.0.60

  application-core:
    build:
      context: ./ApplicationCore
      dockerfile: Dockerfile
    container_name: instore.puntoitstore.it
    restart: "no"
    environment:
      APPLICATION_URL: ${APP_EXT_URL}
      KEYCLOAK_URL: ${KC_INT_URL}
      VAULT_TOKEN: ${VAULT_TOKEN}
      VAULT_URL: ${VAULT_URL}
      MYSQL_URL: ${MYSQL_URL}
    depends_on:
      - keycloak2604
      - vault
      - mysql-db
      - vault-init
      - nginx
    ports:
      - "8081:8080"
    volumes:
      - ./ApplicationCore/spring_log:/var/log/spring
      - ./ApplicationCore/target/${JAR_FILE}:/target/app.jar:ro
      - ./letsencrypt/archive/instore.puntoitstore.it:/app/certs:ro
      - app-uploads:/app/uploads
    entrypoint: java -jar /target/app.jar
    # Disabilita l'esecuzione del container come root, aumentando la sicurezza
    privileged: false
    # Limita i privilegi del container, rimuovendo tutti i privilegi e aggiungendo solo quelli strettamente necessari
    cap_drop:
      - ALL
    # Aggiunge il privilegio di binding alle porte di rete (per il binding a 80 e 443)
    cap_add:
      - NET_BIND_SERVICE
    # Abilita l'opzione di sicurezza per evitare che nuovi privilegi vengano acquisiti da processi nel container
    security_opt:
      - no-new-privileges:true
    # Limita l'uso della memoria del container per evitare che usi risorse eccessive
    mem_limit: 2g  # Il container non può usare più di 2 GB RAM.
    # Riserva memoria sufficiente per garantire che il container abbia almeno 1 GB RAM disponibili
    mem_reservation: 1g   # Il container dovrebbe avere almeno 1 GB  di memoria (soft limit).
    # Imposta un limite sul numero di CPU che il container può utilizzare
    cpus: 2.0  # Il container può usare al massimo 2 core CPU
    ulimits:
      nproc: 1024
#      nproc:100  # Limita il numero massimo di processi che il container può avviare a 100, impedendo attacchi DoS basati sulla creazione eccessiva di processi (es. fork bomb)
    networks:
      instore-network:
        ipv4_address: 172.28.0.40

  nginx:
    build:
      context: ./NginxService
      dockerfile: Dockerfile
    container_name: nginx

    #restart: "always"  # Riavvia il container automaticamente in caso di errori o crash
    restart: "no"
      # Mappa le porte del container verso il sistema host (porta 80 e 443 per HTTP e HTTPS)
    ports:
        - "80:80"
        - "443:443"
      # Monta i volumi per configurazione e certificati
    volumes:
        - ./NginxService/nginx.conf:/etc/nginx/nginx.conf:ro # Monta il file di configurazione nginx.conf in modalità sola lettura
        - ./NginxService/log:/var/log/nginx
        - ./NginxService/logrotate.conf:/etc/logrotate.d/nginx:ro
        - ./letsencrypt/archive/instore.puntoitstore.it:/etc/letsencrypt/archive/instore.puntoitstore.it:ro
        - ./letsencrypt/archive/login.instore.puntoitstore.it:/etc/letsencrypt/archive/login.instore.puntoitstore.it:ro
          #- certbot-data:/var/www/certbot   # Volume per la sfida ACME
      # Disabilita l'esecuzione del container come root, aumentando la sicurezza
    privileged: false
      # Limita i privilegi del container, rimuovendo tutti i privilegi e aggiungendo solo quelli strettamente necessari
    cap_drop:
        - ALL
      # Aggiunge il privilegio di binding alle porte di rete (per il binding a 80 e 443)
    cap_add:
        - NET_BIND_SERVICE
      # Abilita l'opzione di sicurezza per evitare che nuovi privilegi vengano acquisiti da processi nel container
    security_opt:
        - no-new-privileges:true
      # Limita l'uso della memoria del container per evitare che usi risorse eccessive
    mem_limit: 512m  # Il container non può usare più di 512 MB di RAM.
      # Riserva memoria sufficiente per garantire che il container abbia almeno 256 MB disponibili
    mem_reservation: 256m  # Il container dovrebbe avere almeno 256 MB di memoria (soft limit).
      # Imposta un limite sul numero di CPU che il container può utilizzare
    cpus: 0.5  # Il container può usare al massimo il 50% di un core CPU
    ulimits:
      nproc: 512
#      nproc: 100 # Limita il numero massimo di processi che il container può avviare a 100, impedendo attacchi DoS basati sulla creazione eccessiva di processi (es. fork bomb)
    networks:
      instore-network:
          ipv4_address: 172.28.0.50


#  debug:
#    image: weibeld/ubuntu-networking
#    stdin_open: true
#    tty: true
#    networks:
#     - app-network

#  certbot:
#    image: certbot/certbot:v1.23.0
#    container_name: certbot
#    restart: "no"
#    volumes:
#      - ./certbot:/var/www/certbot
#      - ./letsencrypt:/etc/letsencrypt
#    depends_on:
#      - nginx
#    command:
#      - renew
      #- certonly
      #- --webroot
      #- -w
      #- /var/www/certbot
      #- --email=paolorusso3196@gmail.com
      #- --agree-tos
      #- --no-eff-email
      #- -d
      #- instore.puntoitstore.it

volumes:
  mysql-data:
  app-uploads:

networks:
  instore-network:
    name: instore-network
    driver: bridge
    enable_ipv6: false
    ipam:
      config:
        - subnet: 172.28.0.0/24
          gateway: 172.28.0.1